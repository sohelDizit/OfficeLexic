<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Api.Projects</name>
    </assembly>
    <members>
        <member name="T:ASC.Api.Projects.ProjectApi">
            <summary>
            Project information access.
            </summary>
        </member>
        <member name="P:ASC.Api.Projects.ProjectApi.Name">
            <summary>
            Api name entry
            </summary>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.#ctor(ASC.Api.Impl.ApiContext,ASC.Api.Documents.DocumentsApi)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
            <param name="documentsApi">Docs api</param>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSettings(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ASC.Web.Projects.StartModuleType},System.Object)">
            <summary>
            Updates the project settings with the parameters specified in the request.
            </summary>
            <short>
            Update settings
            </short>
            <category>Settings</category>
            <param name="everebodyCanCreate">Specifies if all the portal users can create projects or not</param>
            <param name="hideEntitiesInPausedProjects">Specifies if the entities will be hidden in the paused projects or not</param>
            <param name="startModule">Module type: Projects, Tasks, Discussions, TimeTracking</param>
            <param name="folderId">Folder ID</param>
            <returns>Updated settings</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetSettings">
            <summary>
            Returns the common project settings.
            </summary>
            <short>
            Get settings
            </short>
            <category>Settings</category>
            <returns>Project common settings</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateStatus(ASC.Web.Projects.CustomTaskStatus)">
            <summary>
            Creates a task status specified in the request.
            </summary>
            <short>
            Create a task status
            </short>
            <param name="status">Task status</param>
            <category>Tasks</category>
            <returns>Task status</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateStatus(ASC.Web.Projects.CustomTaskStatus)">
            <summary>
            Updates a task status with a value specified in the request.
            </summary>
            <short>
            Update a task status
            </short>
            <param name="newStatus">New task status</param>
            <category>Tasks</category>
            <returns>Updated task status</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateStatuses(System.Collections.Generic.List{ASC.Web.Projects.CustomTaskStatus})">
            <summary>
            Updates the task statuses with the values specified in the request.
            </summary>
            <short>
            Update task statuses
            </short>
            <param name="statuses">New task statuses</param>
            <category>Tasks</category>
            <returns>Updated task statuses</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetStatuses">
            <summary>
            Returns all the task statuses.
            </summary>
            <short>
            Get task statuses
            </short>
            <category>Tasks</category>
            <returns>Task statuses</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteStatus(System.Int32)">
            <summary>
            Deletes a task status with the ID specified in the request.
            </summary>
            <short>
            Delete a task status
            </short>
            <param name="id">Task status ID</param>
            <category>Tasks</category>
            <returns>Task status</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMessageByFilter(System.Int32,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean,System.Boolean,System.Nullable{ASC.Projects.Core.Domain.MessageStatus})">
            <summary>
            Returns a list with the detailed information about all the messages matching the filter parameters specified in the request.
            </summary>
            <short>
             Get messages by filter
            </short>
            <category>Discussions</category>
            <param name="projectid" optional="true"> Project ID</param>
            <param name="tag" optional="true">Project tag</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="createdStart" optional="true">Minimum value of message creation date</param>
            <param name="createdStop" optional="true">Maximum value of message creation date</param>
            <param name="lastId">Last message ID</param>
            <param name="myProjects">Messages only from my projects or not</param>
            <param name="follow">Messages only from followed discussions or not</param>
            <param name="status">Message status</param>
            <returns>List of messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessages(System.Int32)">
            <summary>
            Returns a list of all the messages in the discussions within a project with the ID specified in the request.
            </summary>
            <short>
            Get messages
            </short>
            <category>Discussions</category>
            <param name="projectid">Project ID</param>
            <returns>List of messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMessage(System.Int32,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a message to the selected discussion within a project with the ID specified in the request.
            </summary>
            <short>
            Add a message
            </short>
            <category>Discussions</category>
            <param name="projectid">Project ID</param>
            <param name="title">Discussion title</param>
            <param name="content">Message text</param>
            <param name="participants">User IDs (GUIDs) separated with ','</param>
            <param name="notify">Notifies participants about a message or not</param>
            <returns>Message</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectMessage(System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates the selected message in the discussion within a project with the ID specified in the request.
            </summary>
            <short>
            Update a message
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <param name="projectid">Project ID</param>
            <param name="title">Discussion title</param>
            <param name="content">New message text</param>
            <param name="participants">New user IDs (GUIDs) separated with ','</param>
            <param name="notify">Notifies participants about a message or not</param>
            <returns>Updated message</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectMessage(System.Int32,ASC.Projects.Core.Domain.MessageStatus)">
            <summary>
            Updates the selected message status.
            </summary>
            <short>
            Update a message status
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <param name="status">New message status</param>
            <returns>Updated message</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjectMessage(System.Int32)">
            <summary>
            Deletes a message with the ID specified in the request from a project discussion.
            </summary>
            <short>
            Delete a message
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessage(System.Int32)">
            <summary>
            Returns the detailed information about a message with the ID specified in the request.
            </summary>
            <short>
            Get a message
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMessageFiles(System.Int32)">
            <summary>
            Returns the detailed information about files attached to the message with the ID specified in the request.
            </summary>
            <short>
            Get message files
            </short>
            <category>Files</category>
            <param name="messageid">Message ID</param>
            <returns>List of message files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToMessage(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads files specified in the request to the selected message.
            </summary>
            <short>
            Upload files to the message
            </short>
            <category>Files</category>
            <param name="messageid">Message ID</param>
            <param name="files">File IDs</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromMessage(System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from a message with the ID specified in the request.
            </summary>
            <short>
            Detach a file from a message
            </short>
            <category>Files</category>
            <param name="messageid">Message ID</param>
            <param name="fileid">File ID</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromMessage(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Detaches the selected files from a message with the ID specified in the request.
            </summary>
            <short>
            Detach files from a message
            </short>
            <category>Files</category>
            <param name="messageid">Message ID</param>
            <param name="files">File ID</param>
            <returns>Message</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectRecentMessages">
            <summary>
            Returns a list of the recent messages in the discussions within a project with the ID specified in the request.
            </summary>
            <short>
            Get recent messages
            </short>
            <category>Discussions</category>
            <returns>List of recent messages</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessagesComments(System.Int32)">
            <summary>
            Returns a list of comments for the discussion message within a project with the ID specified in the request.
            </summary>
            <short>
            Get message comments
            </short>
            <category>Comments</category>
            <param name="messageid">Message ID</param>
            <returns>Message comments</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMessagesComment(System.Int32,System.String,System.Guid)">
            <summary>
            Adds a comment to the selected message with the text specified in the request. The parent comment ID can be also selected.
            </summary>
            <short>
            Add a message comment
            </short>
            <category>Comments</category>
            <param name="messageid">Message ID</param>
            <param name="content">Comment text</param>
            <param name="parentId">Parent comment ID</param>
            <returns>Comment</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SubscribeToMessage(System.Int32)">
            <summary>
            Subscribes to the notifications about the actions performed in the discussion with the selected message.
            </summary>
            <short>
            Subscribe to discussion
            </short>
            <category>Discussions</category>
            <returns>Discussion</returns>
            <param name="messageid">Message ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.IsSubscribedToMessage(System.Int32)">
            <summary>
            Checks subscription to the notifications about the actions performed in the discussion with the selected message.
            </summary>
            <short>
            Check subscription to discussion
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <returns>Boolean value: True - subscibed, False - unsubscribed</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMessageSubscribers(System.Int32)">
            <summary>
            Returns a list of all the subscribers of the discussion with the selected message.
            </summary>
            <short>
            Get subscribers
            </short>
            <category>Discussions</category>
            <param name="messageid">Message ID</param>
            <returns>List of subscibers</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetPreview(System.String)">
            <summary>
            Returns a preview of the discussion message.
            </summary>
            <short>
            Get a message preview
            </short>
            <category>Discussions</category>
            <param name="htmltext">Message text in the HTML format</param>
            <returns>Message preview</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CheckReportData(System.String)">
            <summary>
            Checks the report data by the URI specified in the request.
            </summary>
            <short>
            Check the report data
            </short>
            <category>Report</category>
            <param name="uri">Report URI</param>
            <returns>Report state</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetReportStatus">
            <summary>
            Returns a report status.
            </summary>
            <short>
            Get a report status
            </short>
            <category>Report</category>
            <returns>Report status</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.TerminateReport">
            <summary>
            Terminates the reporting process.
            </summary>
            <short>
            Terminate the reporting process
            </short>
            <category>Report</category>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SaveReportTemplate(System.String,System.String,System.Int32,System.Int32,System.Boolean,ASC.Projects.Core.Domain.Reports.ReportType,System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Guid,System.Guid,ASC.Projects.Core.Domain.Reports.ReportTimeInterval,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean,System.Boolean,ASC.Projects.Core.Domain.AverageTime,System.Boolean)">
            <summary>
            Creates a project report template with the parameters specified in the request. Most of the parameters are optional and depend on the report type selected.
            </summary>
            <short>
            Create a report template
            </short>
            <category>Report</category>         
            <param name="name">Report name</param>
            <param name="period" optional="true">Report template generation period: Day/Week/Month</param>
            <param name="periodItem" optional="true">Period item: weekday name (for weekly report, starting with Sunday), day of the month (for monthly report)</param>
            <param name="hour" optional="true">Report sending time (in hours)</param>
            <param name="autoGenerated" optional="true">Specifies if a report will be automatically generated or not</param>
            <param name="reportType" optional="true">Report type</param>
            <param name="tag" optional="true">Report tag</param>
            <param name="project" optional="true">Report project</param>
            <param name="status" optional="true">Task status</param>       
            <param name="departament" optional="true">Department/Group</param>
            <param name="userId" optional="true">User GUID</param>
            <param name="reportTimeInterval" optional="true">Report time interval</param>
            <param name="fromDate" optional="true">Report period start date</param>
            <param name="toDate" optional="true">Report period end date</param>
            <param name="viewType" optional="true">Report view type: by group or by project</param>
            <param name="noResponsible" optional="true">Specifies if the tasks without responsibles will be shown or hidden</param>   
            <param name="isShowAverageTime"  optional="true">Specifies if the average time will be shown or not</param>
            <param name="typeOfShowAverageTime" optional="true">Average time type (All, ClosingProjects, CompletingTasks)</param>
            <param name="projectAverageCompletingTasks" optional="true">Specifies if the average time of closing projects will be shown or not</param>
            <returns>Project report template</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateReportTemplate(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Boolean,ASC.Projects.Core.Domain.Reports.ReportType,System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Guid,System.Guid,ASC.Projects.Core.Domain.Reports.ReportTimeInterval,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Boolean)">
            <summary>
            Updates the selected project report template with the parameters specified in the request.
            </summary>
            <short>
            Update a report template
            </short>
            <category>Report</category>           
            <param name="reportid">Report template ID</param>    
            <param name="name">New report name</param>
            <param name="period" optional="true">New report template generation period: Day/Week/Month</param>
            <param name="periodItem" optional="true">New period item: weekday name (for weekly report, starting with Sunday), day of the month (for monthly report)</param>
            <param name="hour" optional="true">New report sending time (in hours)</param>
            <param name="autoGenerated" optional="true">Specifies if the report will be automatically generated or not</param>
            <param name="reportType" optional="true">New report type</param>
            <param name="tag" optional="true">New report tag</param>
            <param name="project" optional="true">New report project</param>
            <param name="status" optional="true">New task status</param>       
            <param name="departament" optional="true">New department/group</param>
            <param name="userId" optional="true">New user GUID</param>
            <param name="reportTimeInterval" optional="true">New report time interval</param>
            <param name="fromDate" optional="true">New report period start date</param>
            <param name="toDate" optional="true">New report period end date</param>
            <param name="viewType" optional="true">New view type: by group or by project</param>
            <param name="noResponsible" optional="true">Specifies if the tasks without responsibles will be shown or hidden</param>   
            <returns>Updated project report template</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetReportTemplate(System.Int32)">
            <summary>
            Returns a project report template with the ID specified in the request.
            </summary>
            <short>
            Get a report template
            </short>
            <category>Report</category>
            <param name="reportid">Report template ID</param>
            <returns>Project report template</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteReportTemplate(System.Int32)">
            <summary>
            Deletes a project report template with the ID specified in the request.
            </summary>
            <short>
            Delete a report template
            </short>
            <category>Report</category>   
            <param name="reportid">Report template ID</param>        
            <returns>Project report template</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetGeneratedReports">
            <summary>
            Returns the generated report files.
            </summary>
            <short>
            Get generated reports
            </short>
            <category>Report</category>       
            <returns>Generated report files</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveGeneratedReport(System.Int32)">
            <summary>
            Removes the generated report file with the ID specified in the request.
            </summary>
            <short>
            Remove the generated report
            </short>
            <category>Report</category>
            <param name="fileid">Report file ID</param>
            <returns>Generated report file</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllProjects">
            <summary>
            Returns a list of all the portal projects with the base information about them.
            </summary>
            <short>
            Get projects
            </short>
            <category>Projects</category>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyProjects">
            <summary>
            Returns a list of all the projects in which the current user participates.
            </summary>
            <short>
            Get my projects
            </short>
            <category>Projects</category>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetFollowProjects">
            <summary>
            Returns a list of all the projects which the current user follows.
            </summary>
            <short>
            Get my followed projects
            </short>
            <category>Projects</category>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjects(ASC.Projects.Core.Domain.ProjectStatus)">
            <summary>
            Returns a list of all the projects with a status specified in the request.
            </summary>
            <short>
            Get projects by status
            </short>
            <category>Projects</category>
            <param name="status">Project status: "open"|"paused"|"closed"</param>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProject(System.Int32)">
            <summary>
            Returns the detailed information about a project with ID specified in the request.
            </summary>
            <short>
            Get a project by ID
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <returns>Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByFilter(System.Int32,System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Returns a list of all the portal projects filtered by project title, status, participant ID and other parameters specified in the request.
            </summary>
            <short>
            Get filtered projects
            </short>
            <category>Projects</category>
            <param name="tag" optional="true">Project tag</param>
            <param name="status" optional="true">Project status: "open"|"paused"|"closed"</param>
            <param name="participant" optional="true">Project participant GUID</param>
            <param name="manager" optional="true">Project manager GUID</param>
            <param name="departament">Project department</param>
            <param name="follow" optional="true">Specifies if the current user follows this project or not</param>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SearchProject(System.Int32,System.String)">
            <summary>
            Returns the search results for a project containing the words/phrases matching the query specified in the request.
            </summary>
            <short>
            Search in a project
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <param name="query">Search query</param>
            <returns>List of results</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SearchProjects(System.String)">
            <summary>
            Returns a list of all the projects matching the query specified in the request.
            </summary>
            <short>
            Search projects
            </short>
            <category>Projects</category>
            <param name="query">Search query</param>
            <returns>List of results</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateProject(System.String,System.String,System.Guid,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Task},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Milestone},System.Nullable{System.Boolean})">
            <summary>
            Creates a new project using all the necessary (title, description, responsible ID, etc) and some optional parameters specified in the request.
            </summary>
            <short>
            Create a project
            </short>
             <category>Projects</category>
            <param name="title">Project title</param>
            <param name="description">Project description</param>
            <param name="responsibleId">Project responsible ID</param>
            <param name="tags">Project tags</param>
            <param name="private">Private project or not</param>
            <param name="participants" optional="true">Project participants</param>
            <param name="notify" optional="true">Notifies a project manager about the project actions or not</param>
            <param name="tasks">Project tasks</param>
            <param name="milestones">Project milestones</param>
            <param name="notifyResponsibles">Notifies responsibles about the project actions or not</param>
            <returns>Newly created project</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateProject(System.String,System.String,System.Guid,System.String,System.Boolean,System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Participant},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Task},System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Milestone},System.Nullable{System.Boolean})">
            <summary>
            Creates a new project with team security using all the necessary (title, description, responsible ID, etc) and some optional parameters specified in the request.
            </summary>
            <short>
            Create a project with team security
            </short>
             <category>Projects</category>
            <param name="title">Project title</param>
            <param name="description">Project description</param>
            <param name="responsibleId">Project responsible ID</param>
            <param name="tags">Project tags</param>
            <param name="private">Private project or not</param>
            <param name="participants" optional="true">Project participants</param>
            <param name="notify" optional="true">Notifies a project manager about the project actions or not</param>
            <param name="tasks">Project tasks</param>
            <param name="milestones">Project milestones</param>
            <param name="notifyResponsibles">Notifies responsibles about the project actions or not</param>
            <returns>Newly created project</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,System.String,System.String,System.Guid,System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Updates the existing project using all the parameters (project ID, title, description, responsible ID, etc) specified in the request.
            </summary>
            <short>
            Update a project
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <param name="title">New project title</param>
            <param name="description">New project description</param>
            <param name="responsibleId">New project responsible ID</param>
            <param name="tags">New project tags</param>
            <param name="participants">New project participants</param>
            <param name="status">New project status: Open, Paused or Closed</param>
            <param name="private">Private project or not</param>
            <param name="notify">Notifies a project manager about the project actions or not</param>
            <returns>Updated project</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,System.String,System.String,System.Guid,System.String,System.Collections.Generic.IEnumerable{ASC.Projects.Core.Domain.Participant},System.Nullable{ASC.Projects.Core.Domain.ProjectStatus},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Updates the existing project with team security using all the parameters (project ID, title, description, responsible ID, etc) specified in the request.
            </summary>
            <short>
            Update a project with team security
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <param name="title">New project title</param>
            <param name="description">New project description</param>
            <param name="responsibleId">New project responsible ID</param>
            <param name="tags">New project tags</param>
            <param name="participants">New project participants</param>
            <param name="status">New project status: Open, Paused or Closed</param>
            <param name="private">Private project or not</param>
            <param name="notify">Notifies a project manager about the project actions or not</param>
            <returns>Updated project</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProject(System.Int32,ASC.Projects.Core.Domain.ProjectStatus)">
            <summary>
            Updates a status of a project with the ID specified in the request.
            </summary>
            <short>
            Update a project status
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <param name="status">New project status: Open, Paused or Closed</param>
            <returns>Updated project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProject(System.Int32)">
            <summary>
            Deletes a project with the ID specified in the request from the portal.
            </summary>
            <short>
            Delete a project
            </short>
            <category>Projects</category>
            <param name="id">Project ID</param>
            <returns>Deleted project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjects(System.Int32[])">
            <summary>
            Deletes the projects with the IDs specified in the request from the portal.
            </summary>
            <short>
            Delete projects
            </short>
            <category>Projects</category>
            <param name="projectids">List of project IDs</param>
            <returns>Deleted projects</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.FollowToProject(System.Int32)">
            <summary>
            Subscribes to or unsubscribes from the notifications about the actions performed in the project with the ID specified in the request.
            </summary>
            <short>
            Project subscription
            </short>
            <category>Projects</category>
            <param name="projectId">Project ID</param>
            <returns>Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTags(System.Int32,System.String)">
            <summary>
            Updates a tag for the selected project with a tag specified in the request.
            </summary>
            <short>
            Update a project tag
            </short>
            <category>Tags</category>
            <param name="id">Project ID</param>
            <param name="tags">New project tag</param>
            <returns>Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTags(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Updates the tags for the selected project with the tags specified in the request.
            </summary>
            <short>
            Update project tags
            </short>
            <category>Tags</category>
            <param name="id">Project ID</param>
            <param name="tags">New project tags</param>
            <returns>Project</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTime(System.Int32)">
            <summary>
            Returns the detailed information about the time spent on the project with the ID specified in the request.
            </summary>
            <short>
            Get project time
            </short>
            <category>Time</category>
            <param name="id">Project ID</param>
            <returns>List of project time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTotalProjectTime(System.Int32)">
            <summary>
            Returns the total time spent on the project with the ID specified in the request.
            </summary>
            <short>Get total project time</short>
            <category>Time</category>
            <param name="id">Project ID</param>
            <returns>Project time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectMilestone(System.Int32,System.String,ASC.Specific.ApiDateTime,System.Boolean,System.Boolean,System.String,System.Guid,System.Boolean)">
            <summary>
            Adds a new milestone using the parameters (project ID, milestone title, deadline, etc) specified in the request.
            </summary>
            <short>
            Add a milestone
            </short>
            <category>Milestones</category>
            <param name="id">Project ID</param>
            <param name="title">Milestone title</param>
            <param name="deadline">Milestone deadline</param>
            <param name="isKey">Specifies if this is a key milestone or not</param>
            <param name="isNotify">Reminds me 48 hours before the milestone due date</param>
            <param name="description">Milestone description</param>
            <param name="responsible">Milestone responsible</param>
            <param name="notifyResponsible">Notifies the responsible about the milestone actions or not</param>
            <returns>Added milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMilestones(System.Int32)">
            <summary>
            Returns a list of all the milestones within a project with the ID specified in the request.
            </summary>
            <short>
            Get milestones by project ID
            </short>
            <category>Milestones</category>
            <param name="id">Project ID</param>
            <returns>List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMilestones(System.Int32,ASC.Projects.Core.Domain.MilestoneStatus)">
            <summary>
            Returns a list of all the milestones with the selected status within a project with the ID specified in the request.
            </summary>
            <short>
            Get milestones by project ID and milestone status
            </short>
            <category>Milestones</category>
            <param name="id">Project ID</param>
            <param name="status">Milestone status</param>
            <returns>List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeam(System.Int32)">
            <summary>
            Returns a list of all the users participating in the project with the ID specified in the request.
            </summary>
            <short>
            Get a project team
            </short>
            <category>Teams</category>
            <param name="projectid">Project ID</param>
            <returns>List of team members</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeamExcluded(System.Int32)">
            <summary>
            Returns a list of all the current and excluded project team members.
            </summary>
            <short>
            Get a project team with excluded members
            </short>
            <category>Teams</category>
            <param name="projectid">Project ID</param>
            <returns>List of team members</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTeam(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns a list of all the users participating in the projects with the ID specified in the request.
            </summary>
            <short>
            Get team members of projects
            </short>
            <category>Teams</category>
            <param name="ids">List of project IDs</param>
            <returns>List of team members</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddToProjectTeam(System.Int32,System.Guid)">
            <summary>
            Adds a user with the ID specified in the request to the selected project team.
            </summary>
            <short>
            Add a user to the team
            </short>
            <category>Teams</category>
            <param name="projectid">Project ID</param>
            <param name="userId">User ID</param>
            <returns>List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SetProjectTeamSecurity(System.Int32,System.Guid,ASC.Projects.Core.Domain.ProjectTeamSecurity,System.Boolean)">
            <summary>
            Sets the security rights to the user with the ID specified in the request within the selected project.
            </summary>
            <short>
            Set team security
            </short>
            <category>Teams</category>
            <param name="projectid">Project ID</param>
            <param name="userId">User ID</param>
            <param name="security">Security rights</param>
            <param name="visible">Specifies if the security rights for the user will be visible or not</param>
            <returns>List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteFromProjectTeam(System.Int32,System.Guid)">
            <summary>
            Removes a user with the ID specified in the request from the selected project team.
            </summary>
            <short>
            Remove a user from the team
            </short>
            <category>Teams</category>
            <param name="projectid">Project ID</param>
            <param name="userId">User ID</param>
            <returns>List of team members</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTeam(System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Updates a project team with the user IDs specified in the request.
            </summary>
            <short>
            Update a project team
            </short>
            <category>Teams</category>
            <param name="projectId">Project ID</param>
            <param name="participants">List of user IDs</param>
            <param name="notify">Notifies a project team about the updated project or not</param>
            <returns>Number of project participants</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTasks(System.Int32)">
            <summary>
            Returns a list of all the tasks within a project with the ID specified in the request.
            </summary>
            <short>
            Get tasks
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException">List of tasks</exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Projects.Core.Domain.TaskPriority,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,ASC.Specific.ApiDateTime)">
            <summary>
            Adds a task to the selected project with the parameters (responsible user ID, task description, deadline time, etc) specified in the request.
            </summary>
            <short>
            Add a task
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="description">Task description</param>
            <param name="deadline">Task deadline time</param>
            <param name="priority">Task priority: Low|Normal|High</param>
            <param name="title">Task title</param>
            <param name="milestoneid">Task milestone ID</param>
            <param name="responsibles">List of responsibles</param>
            <param name="notify">Notifies the responsibles about the task actions or not</param>
            <param name="startDate">Task start date</param>
            <returns>Added task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectTaskByMessage(System.Int32,System.Int32)">
            <summary>
            Adds a task to the selected project by message ID specified in the request.
            </summary>
            <short>
            Add a task by message ID
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="messageid">Message ID</param>
            <returns>Added task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectTasks(System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns a list of all the tasks with the selected status in the project with the ID specified in the request.
            </summary>
            <short>
            Get tasks by status
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="status">Task status: not accept|open|closed|disable|unclassified|not in milestone</param>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMyTasks(System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns a list of all the tasks for the current user with the selected status in the project with the ID specified in the request.
            </summary>
            <short>
            Get my tasks by status and project ID
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="status">Task status: not accept|open|closed|disable|unclassified|not in milestone</param>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectFiles(System.Int32)">
            <summary>
            Returns the detailed list of all the files and folders for the project with the ID specified in the request.
            </summary>
            <short>
            Get project files by project ID
            </short>
            <category>Files</category>
            <param name="id">Project ID</param>
            <returns>Project files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetEntityFiles(ASC.Projects.Core.Domain.EntityType,System.Int32)">
            <summary>
            Returns a list of all the files within the entity (message or task) with the type and ID specified in the request.
            </summary>
            <short>
            Get entity files
            </short>
            <category>Files</category>
            <param name="entityType">Entity type</param>
            <param name="entityID">Entity ID</param>
            <returns>Files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads the selected files to the entity (project, milestone, task) with the type and ID specified in the request.
            </summary>
            <short>
            Upload files to the entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type </param>
            <param name="entityID">Entity ID</param>
            <param name="files">List of file IDs</param>
            <returns>Uploaded files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from the entity (project, milestone, task) with the type and ID specified in the request.
            </summary>
            <short>
            Detach a file from the entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type</param>
            <param name="entityID">Entity ID</param>
            <param name="fileid">File ID</param>
            <returns>Detached file</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Detaches the selected files from the entity (project, milestone, task) with the type and ID specified in the request.
            </summary>
            <short>
            Detach files from the entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type</param>
            <param name="entityID">Entity ID</param>
            <param name="files">List of file IDs</param>
            <returns>Detached files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToEntity(ASC.Projects.Core.Domain.EntityType,System.Int32,System.String,System.IO.Stream,System.Net.Mime.ContentType,System.Net.Mime.ContentDisposition,System.Collections.Generic.IEnumerable{System.Web.HttpPostedFileBase},System.Boolean,System.Boolean)">
            <summary>
            Uploads the selected files to the entity (project, milestone, task) with the type and ID specified in the request.
            </summary>
            <short>
            Upload files to the entity
            </short>
            <category>Files</category>
            <param name="entityType">Entity type</param>
            <param name="entityID">Entity ID</param>
            <param name="folderid">Folder ID</param>
            <param name="file" visible="false">Request input stream</param>
            <param name="contentType" visible="false">Content-Type header</param>
            <param name="contentDisposition" visible="false">Content-Disposition header</param>
            <param name="files" visible="false">List of files when posted as multipart/form-data</param>
            <param name="createNewIfExist" visible="false">Creates a new file if it already exists</param>
            <param name="storeOriginalFileFlag" visible="false">If true, then upload files in the original formats as well</param>
            <returns>Uploaded files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByContactID(System.Int32)">
            <summary>
             Returns a list of all the projects linked with a contact with the ID specified in the request.
            </summary>
            <param name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Get contact projects</short> 
            <returns>
            List of projects
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectContact(System.Int32,System.Int32)">
            <summary>
             Adds the selected contact to the project with the ID specified in the request.
            </summary>
            <param name="projectid">Project ID</param>
            <param name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Add a project contact</short> 
            <returns>Project</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteProjectContact(System.Int32,System.Int32)">
            <summary>
             Deletes the selected contact from the project with the ID specified in the request.
            </summary>       
            <param name="projectid">Project ID</param>
            <param name="contactid">Contact ID</param>
            <category>Contacts</category>
            <short>Delete a project contact</short> 
            <returns>Project</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllTemplates">
            <summary>
            Returns a list of all the templates with the base information about them.
            </summary>
            <short>
            Get templates
            </short>
            <category>Templates</category>
            <returns>List of templates</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTemplate(System.Int32)">
            <summary>
            Returns the detailed information about a template with ID specified in the request.
            </summary>
            <short>
            Get a template by ID
            </short>
            <category>Templates</category>
            <param name="id">Template ID</param>
            <returns>Template</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateTemplate(System.String,System.String)">
            <summary>
            Creates a new template with the title and description specified in the request. 
            </summary>
            <short>
            Create a template
            </short>
            <category>Templates</category>
            <param name="title">Template title</param>
            <param name="description">JSON template structure in the following format: {"tasks":[{"title":"Task without milestone"}],"milestones":[{"title":"milestone title","duration":0.5,"tasks":[{"title":"milestone task"}]}]}</param>
            <returns>Newly created template</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTemplate(System.Int32,System.String,System.String)">
            <summary>
            Updates the existing template information with the parameters specified in the request.
            </summary>
            <short>
            Update a template
            </short>
            <category>Templates</category>
            <param name="id">Template ID</param>
            <param name="title">New template title</param>
            <param name="description">New JSON template structure in the following format: {"tasks":[{"title":"Task without milestone"}],"milestones":[{"title":"milestone title","duration":0.5,"tasks":[{"title":"milestone task"}]}]}</param>
            <returns>Updated template</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTemplate(System.Int32)">
            <summary>
            Deletes a template with the ID specified in the request from the portal.
            </summary>
            <short>
            Delete a template
            </short>
            <category>Templates</category>
            <param name="id">Template ID</param>
            <returns>Deleted template</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectSecurityInfo">
            <summary>
             Returns the basic information about the access rights.
            </summary>
            <short>
             Get security information
            </short>
            <category>Projects</category>
            <returns>Basic information about the access rights</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectMaxLastModified">
            <summary>
             Returns the last modified project.
            </summary>
            <short>
             Get the last modified project
            </short>
            <category>Projects</category>
            <returns>Last modified project</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskOrder(System.Int32)">
            <summary>
             Returns the current task order in the project with the ID specified in the request.
            </summary>
            <short>
             Get the task order
            </short>
            <category>Tasks</category>
            <param name="id">Project ID</param>
            <returns>Task order</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SetTaskOrder(System.Int32,System.String)">
            <summary>
             Sets the task order to the project with the ID specified in the request.
            </summary>
            <short>
             Set the task order
            </short>
            <category>Tasks</category>
            <param name="id">Project ID</param>
            <param name="order">Task order</param>
            <returns>Task order</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyTasks">
            <summary>
            Returns a list with the detailed information about all the tasks for the current user.
            </summary>
            <short>
            Get my tasks
            </short>
            <category>Tasks</category>
            <returns>List of tasks</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMyTasks(ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Returns a list with the detailed information about the tasks for the current user with a status specified in the request.
            </summary>
            <short>
            Get my tasks by status
            </short>
            <category>Tasks</category>
            <param name="status">Task status: not accept|open|closed|disable|unclassified|not in milestone</param>
            <returns>List of tasks</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTask(System.Int32)">
            <summary>
            Returns the detailed information about a task with the ID specified in the request.
            </summary>
            <short>
            Get a task
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTask(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the detailed information about the tasks with the IDs specified in the request.
            </summary>
            <short>
            Get tasks
            </short>
            <category>Tasks</category>
            <param name="taskid">Task IDs</param>
            <returns>Task</returns>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Nullable{System.Int32},System.Boolean,System.Guid,System.Nullable{System.Guid},System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32)">
            <summary>
            Returns a list with the detailed information about all the tasks matching the filter parameters specified in the request.
            </summary>
            <short>
            Get tasks by filter
            </short>
            <category>Tasks</category>
            <param name="projectid" optional="true"> Project ID</param>
            <param name="myProjects">Returns tasks only from my projects</param>
            <param name="milestone" optional="true">Milestone ID</param>
            <param name="myMilestones">Returns tasks only from my milestones</param>
            <param name="nomilestone">Returns tasks only without milestones</param>
            <param name="tag" optional="true">Project tag</param>
            <param name="status" optional="true">Task status</param>
            <param name="substatus" optional="true">Custom task status</param>
            <param name="follow">Messages only from followed tasks or not</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="creator">Creator GUID</param>
            <param name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param name="lastId">Last task ID</param>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetSimpleTaskByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Boolean,System.Guid,System.Nullable{System.Guid},System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32)">
            <summary>
            Returns a list of all the tasks matching the filter parameters specified in the request.
            </summary>
            <short>
            Get tasks without detailed information by filter
            </short>
            <category>Tasks</category>
            <param name="projectid" optional="true"> Project ID</param>
            <param name="myProjects">Returns tasks only from my projects</param>
            <param name="milestone" optional="true">Milestone ID</param>
            <param name="myMilestones">Returns tasks only from my milestones</param>
            <param name="tag" optional="true">Project Tag</param>
            <param name="status" optional="true">Task Status</param>
            <param name="follow">Messages only from followed tasks or not</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="creator">Creator GUID</param>
            <param name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param name="lastId">Last task ID</param>
            <visible>false</visible>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskFiles(System.Int32)">
            <summary>
            Returns a list of all the files attached to the task with the ID specified in the request.
            </summary>
            <short>
            Get task files
            </short>
            <category>Files</category>
            <param name="taskid">Task ID</param>
            <returns>List of files</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UploadFilesToTask(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Uploads the files specified in the request to the selected task.
            </summary>
            <short>
            Upload files to the task
            </short>
            <category>Files</category>
            <param name="taskid">Task ID</param>
            <param name="files">File IDs</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromTask(System.Int32,System.Int32)">
            <summary>
            Detaches the selected file from a task with the ID specified in the request.
            </summary>
            <short>
            Detach a file from a task
            </short>
            <category>Files</category>
            <param name="taskid">Task ID</param>
            <param name="fileid">File ID</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DetachFileFromTask(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Detaches the selected files from a task with the ID specified in the request.
            </summary>
            <short>
            Detach files from a task
            </short>
            <category>Files</category>
            <param name="taskid">Task ID</param>
            <param name="files">File IDs</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <visible>false</visible>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTask(System.Int32,ASC.Projects.Core.Domain.TaskStatus,System.Int32)">
            <summary>
            Updates a status of a task with the ID specified in the request.
            </summary>
            <short>
            Update a task status by task ID
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="status">New task status: Open or Closed</param>
            <param name="statusId">Custom status ID</param>
            <returns>Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTasks(System.Int32[],ASC.Projects.Core.Domain.TaskStatus,System.Int32)">
            <summary>
            Updates a status of the tasks with the IDs specified in the request.
            </summary>
            <short>
            Update a status of tasks
            </short>
            <category>Tasks</category>
            <param name="taskids">Task IDs</param>
            <param name="status">New task status: Open or Closed</param>
            <param name="statusId">New custom status ID</param>
            <returns>Updated tasks</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTask(System.Int32,System.Int32)">
            <summary>
            Updates a milestone of a task with the ID specified in the request.
            </summary>
            <short>
            Update a task milestone
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="milestoneid">Milestone ID</param>
            <returns>Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTasks(System.Int32[],System.Int32)">
            <summary>
            Updates a milestone of the tasks with the IDs specified in the request.
            </summary>
            <short>
            Update a milestone of tasks
            </short>
            <category>Tasks</category>
            <param name="taskids">Task IDs</param>
            <param name="milestoneid">Milestone ID</param>
            <returns>Updated tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CopyTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Projects.Core.Domain.TaskPriority,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,ASC.Specific.ApiDateTime,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies a task with the parameters specified in the request.
            </summary>
            <short>
            Copy a task
            </short>
            <category>Tasks</category>
            <param name="projectid">Project ID</param>
            <param name="description">Task description</param>
            <param name="deadline">Task deadline</param>
            <param name="priority">Task priority: Low|Normal|High</param>
            <param name="title">Task title</param>
            <param name="milestoneid">Task milestone ID</param>
            <param name="responsibles">List of task responsibles</param>
            <param name="notify">Notifies responsibles about the task actions or not</param>
            <param name="startDate">Task start date</param>
            <param name="copyFrom">Task ID from which the information is copied</param>
            <param name="copySubtasks">Specifies if the subtasks will be copied or not</param>
            <param name="copyFiles">Specifies if the files will be copied or not</param>
            <param name="removeOld">Specifies if the original task will be removed or not</param>
            <returns>Copied task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateProjectTask(System.Int32,System.String,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Nullable{ASC.Projects.Core.Domain.TaskPriority},System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Boolean,System.Nullable{ASC.Projects.Core.Domain.TaskStatus},System.Nullable{System.Int32})">
            <summary>
            Updates the selected task with the parameters (responsible user ID, task description, deadline time, etc) specified in the request.
            </summary>
            <short>
            Update a task
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="description">New task description</param>
            <param name="deadline">New task deadline time</param>
            <param name="startDate">New task start date</param>
            <param name="priority">New task priority</param>
            <param name="title">New task title</param>
            <param name="milestoneid">New task milestone ID</param>
            <param name="responsibles">New list of task responsibles</param>
            <param name="projectID">New task project ID</param>
            <param name="notify">Notifies responsibles about the task actions or not</param>
            <param name="status" optional="true">New task status</param>
            <param name="progress" optional="true">New task progress</param>
            <returns>Updated task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTask(System.Int32)">
            <summary>
            Deletes a task with the ID specified in the request from the project.
            </summary>
            <short>
            Delete a task
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <returns>Deleted task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTasks(System.Int32[])">
            <summary>
            Deletes the tasks with the IDs specified in the request from the project.
            </summary>
            <short>
            Delete tasks
            </short>
            <category>Tasks</category>
            <param name="taskids">Task IDs</param>
            <returns>Deleted tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskComments(System.Int32)">
            <summary>
            Returns a list of the comments for the task with the ID specified in the request.
            </summary>
            <short>
            Get task comments
            </short>
            <category>Comments</category>
            <param name="taskid">Task ID</param>
            <returns>List of comments</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddTaskComments(System.Int32,System.String,System.Guid)">
            <summary>
            Adds a comment to the selected task with the comment text and parent comment ID specified in the request.
            </summary>
            <short>
            Add a task comment
            </short>
            <category>Comments</category>
            <param name="taskid">Task ID</param>
            <param name="content">Comment text</param>
            <param name="parentid">Parent comment ID</param>
            <returns>List of comments</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.NotifyTaskResponsible(System.Int32)">
            <summary>
            Notifies the responsible for the task with the ID specified in the request about the task.
            </summary>
            <short>
            Notify the task responsible
            </short>
            <category>Tasks</category>
            <returns>Task</returns>
            <param name="taskid">Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.SubscribeToTask(System.Int32)">
            <summary>
            Subscribes to the notifications about the actions performed with the selected task.
            </summary>
            <short>
            Subscribe to task actions
            </short>
            <category>Tasks</category>
            <returns>Task</returns>
            <param name="taskid">Task ID</param>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.IsSubscribeToTask(System.Int32)">
            <summary>
            Checks the subscription to the notifications about the actions performed with the selected task.
            </summary>
            <short>
            Check the subscription to task actions
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <returns>Boolean value: True - subscribed, False - unsubscribed</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddLink(System.Int32,System.Int32,ASC.Projects.Core.Domain.TaskLinkType)">
            <summary>
            Adds a link between the dependent and parent tasks specified in the request.
            </summary>
            <short>
            Add a link between tasks
            </short>
            <category>Tasks</category>
            <param name="parentTaskId">Parent task ID</param>
            <param name="dependenceTaskId">Dependent task ID</param>
            <param name="linkType">Link type</param>
            <returns>Dependent task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveLink(System.Int32,System.Int32)">
            <summary>
            Removes a link between the dependent and parent tasks specified in the request.
            </summary>
            <short>
            Remove a link between tasks 
            </short>
            <category>Tasks</category>
            <param name="dependenceTaskId">Dependent task ID</param>
            <param name="parentTaskId">Parent task ID</param>
            <returns>Dependent task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddSubtask(System.Int32,System.Guid,System.String)">
            <summary>
            Creates a subtask with the title and responsible within the parent task specified in the request.
            </summary>
            <short>
            Create a subtask
            </short>
            <category>Tasks</category>
            <param name="taskid">Parent task ID</param>
            <param name="responsible">Subtask responsible</param>
            <param name="title">Subtask title</param>
            <returns>Task</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CopySubtask(System.Int32,System.Int32)">
            <summary>
            Copies a subtask with the ID specified in the request.
            </summary>
            <short>
            Copy a subtask
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="subtaskid">Subtask ID</param>
            <returns>New subtask</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.MoveSubtask(System.Int32,System.Int32)">
            <summary>
            Moves a subtask with the ID specified in the request to another task.
            </summary>
            <short>
            Move a subtask
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="subtaskid">Subtask ID</param>
            <returns>Updated subtask</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSubtask(System.Int32,System.Int32,System.Guid,System.String)">
            <summary>
            Updates the selected subtask with the title and responsible specified in the request.
            </summary>
            <short>
            Update a subtask
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="subtaskid">Subtask ID</param>
            <param name="responsible">New subtask responsible</param>
            <param name="title">New subtask title</param>
            <returns>Updated subtask</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteSubtask(System.Int32,System.Int32)">
            <summary>
            Deletes the selected subtask from the parent task with the ID specified in the request.
            </summary>
            <short>
            Delete a subtask
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="subtaskid">Subtask ID</param>
            <returns>Subtask</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateSubtask(System.Int32,System.Int32,ASC.Projects.Core.Domain.TaskStatus)">
            <summary>
            Updates the selected subtask status of the parent task with the ID specified in the request.
            </summary>
            <short>
            Update a subtask status
            </short>
            <category>Tasks</category>
            <param name="taskid">Task ID</param>
            <param name="subtaskid">Subtask ID</param>
            <param name="status">New subtask status: open|closed|disable|unclassified</param>
            <returns>Updated subtask</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetComment(System.Guid)">
            <summary>
            Returns the information about a comment with the ID specified in the request.
            </summary>
            <short>
            Get a comment
            </short>
            <category>Comments</category>
            <param name="commentid">Comment ID</param>
            <returns>Comment</returns>        
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectCommentPreview(System.String,System.String)">
            <summary>
            Get a preview of a project comment with the ID specified in the request.
            </summary>
            <short>
            Get a comment preview
            </short>
            <category>Comments</category>
            <param name="htmltext">Comment text in the HTML format</param>
            <param name="commentid">Comment ID or empty string if a comment is new</param>
            <returns>Comment information</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.RemoveProjectComment(System.String)">
            <summary>
            Removes a comment with the ID specified in the request.
            </summary>
            <short>Remove a comment</short>
            <section>Comments</section>
            <param name="commentid">Comment ID</param>
            <returns>Comment ID</returns>
            <category>Comments</category>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddProjectComment(System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a project comment with the parameters specified in the request. The parent comment ID can also be selected.
            </summary>
            <short>Add a project comment</short>
            <param name="parentcommentid">Parent comment ID</param>
            <param name="entityid">Entity ID</param>
            <param name="content">Comment text</param>
            <param name="type">Comment type (message or task)</param>
            <category>Comments</category>
            <returns>Comment information</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateComment(System.String,System.String)">
             <summary>
             Updates the seleted comment using the comment text specified in the request.
             </summary>
             <short>Update a comment</short>
             <param name="commentid">Comment ID</param>
             <param name="content">New comment text</param>
            <category>Comments</category>
             <returns>Updated comment</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetAllTags">
            <summary>
            Returns a list of all the available project tags.
            </summary>
            <short>
            Get project tags
            </short>
            <category>Tags</category>
            <returns>List of tags</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.CreateNewTag(System.String)">
            <summary>
            Creates a new tag with the data specified in the request.
            </summary>
            <short>
            Create a tag
            </short>
            <category>Tags</category>
            <param name="data">Tag data</param>
            <returns>Created tag</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetProjectsByTags(System.String)">
            <summary>
            Returns the detailed list of all the projects with a tag specified in the request.
            </summary>
            <short>
            Get projects by a tag
            </short>
            <category>Tags</category>
            <param name="tag">Tag name</param>
            <returns>List of projects</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTagsByName(System.String)">
            <summary>
            Returns a list of all the tags by the tag name specified in the request.
            </summary>
            <short>
            Get tags by a tag name
            </short>
            <category>Tags</category>
            <param name="tagName">Tag name</param>
            <returns>List of tags</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestones">
            <summary>
            Returns a list of all the upcoming milestones within all the portal projects.
            </summary>
            <short>
            Get milestones
            </short>
            <category>Milestones</category>
            <returns>List of milestones</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByFilter(System.Int32,System.Int32,System.Nullable{ASC.Projects.Core.Domain.MilestoneStatus},ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Nullable{System.Guid},System.Int32,System.Boolean,System.Guid)">
            <summary>
            Returns a list of all the milestones matching the parameters specified in the request.
            </summary>
            <short>
            Get milestones by filter
            </short>
            <category>Milestones</category>
            <param name="projectid" optional="true">Project ID</param>
            <param name="tag" optional="true">Project tag</param>
            <param name="status" optional="true">Milestone status (Open or Closed)</param>
            <param name="deadlineStart" optional="true">Minimum value of task deadline</param>
            <param name="deadlineStop" optional="true">Maximum value of task deadline</param>
            <param name="taskResponsible" optional="true">Task responsible GUID</param>
            <param name="lastId">Last milestone ID</param>
            <param name="myProjects">Returns milestones only from my projects</param>
            <param name="milestoneResponsible">Milestone responsible GUID</param>
            <returns>List of milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetLateMilestones">
            <summary>
            Returns a list of all the overdue milestones in the portal projects.
            </summary>
            <short>
            Get overdue milestones
            </short>
            <category>Milestones</category>
            <returns>List of milestones</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByDeadLineFull(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a list of all the milestones with the deadline specified in the request.
            </summary>
            <short>
            Get milestones by deadline
            </short>
            <category>Milestones</category>
            <param name="year">Deadline year</param>
            <param name="month">Deadline month</param>
            <param name="day">Deadline day</param>
            <returns>List of milestones</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestonesByDeadLineMonth(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the milestones with the deadline month specified in the request.
            </summary>
            <short>
            Get milestones by deadline month
            </short>
            <category>Milestones</category>
            <param name="year">Deadline year</param>
            <param name="month">Deadline month</param>
            <returns>List of milestones</returns>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestoneById(System.Int32)">
            <summary>
            Returns a list with the detailed information about a milestone with the ID specified in the request.
            </summary>
            <short>
            Get a milestone
            </short>
            <category>Milestones</category>
            <param name="id">Milestone ID</param>
            <returns>Milestone</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetMilestoneTasks(System.Int32)">
            <summary>
            Returns a list of all the tasks within a milestone with the ID specified in the request.
            </summary>
            <short>
            Get milestone tasks 
            </short>
            <category>Milestones</category>
            <param name="id">Milestone ID</param>
            <returns>List of tasks</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateMilestone(System.Int32,System.String,ASC.Specific.ApiDateTime,System.Nullable{System.Boolean},ASC.Projects.Core.Domain.MilestoneStatus,System.Nullable{System.Boolean},System.String,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Updates the selected milestone changing the milestone parameters (title, deadline, status, etc.) specified in the request.
            </summary>
            <short>
            Update a milestone
            </short>
            <category>Milestones</category>
            <param name="id">Milestone ID</param>
            <param name="title">New milestone title</param>
            <param name="deadline">New milestone deadline</param>
            <param name="isKey">Specifies if this is a key milestone or not</param>
            <param name="status">New milestone status</param>
            <param name="isNotify">Reminds me 48 hours before the milestone due date</param>
            <param name="description">New milestone description</param>
            <param name="projectID">New project ID</param>
            <param name="responsible">New milestone responsible</param>
            <param name="notifyResponsible">Notifies responsible about the milestone actions or not</param>
            <returns>Updated milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <example>
            <![CDATA[
            Sending data in application/json:
            
            {
                title:"New title",
                deadline:"2011-03-23T14:27:14",
                isKey:false,
                status:"Open"
            }
            ]]>
            </example>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateMilestone(System.Int32,ASC.Projects.Core.Domain.MilestoneStatus)">
            <summary>
            Updates a status of a milestone with the ID specified in the request.
            </summary>
            <short>
            Update a milestone status
            </short>
            <category>Milestones</category>
            <param name="id">Milestone ID</param>
            <param name="status">New milestone status (Open or Closed)</param>
            <returns>Updated milestone</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
            <example>
            <![CDATA[
            Sending data in application/json:
            
            {
                status:"Open"
            }
            ]]>
            </example>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteMilestone(System.Int32)">
            <summary>
            Deletes a milestone with the ID specified in the request.
            </summary>
            <short>
            Delete a milestone
            </short>
            <category>Milestones</category>
            <param name="id">Milestone ID</param>
            <returns>Deleted milestone</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteMilestones(System.Int32[])">
            <summary>
            Deletes the milestones with the IDs specified in the request.
            </summary>
            <short>
            Delete milestones
            </short>
            <category>Milestones</category>
            <param name="ids">Milestone IDs</param>
            <returns>Deleted milestones</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskTimeByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Nullable{ASC.Projects.Core.Domain.PaymentStatus})">
            <summary>
            Returns a list with the detailed information about all the task time spent matching the filter parameters specified in the request.
            </summary>
            <short>
            Get task time by filter
            </short>
            <category>Time</category>
            <param name="projectid" optional="true"> Project ID</param>
            <param name="myProjects">Returns task time only for my projects</param>
            <param name="milestone" optional="true">Milestone ID</param>
            <param name="myMilestones">Returns task time only for my milestones</param>
            <param name="tag" optional="true">Project tag</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="createdStart" optional="true">Starting task creation</param>
            <param name="createdStop" optional="true">Finishing task creation</param>
            <param name="lastId">Last spent time ID</param>
            <param name="status" optional="true">Payment status</param>
            <returns>List of spent time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTotalTaskTimeByFilter(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Int32,System.Guid,System.Guid,ASC.Specific.ApiDateTime,ASC.Specific.ApiDateTime,System.Int32,System.Nullable{ASC.Projects.Core.Domain.PaymentStatus})">
            <summary>
            Returns the total time spent matching the filter parameters specified in the request.
            </summary>
            <short>
            Get total task time by filter
            </short>
            <category>Time</category>
            <param name="projectid" optional="true"> Project ID</param>
            <param name="myProjects">Returns task time only for my projects</param>
            <param name="milestone" optional="true">Milestone ID</param>
            <param name="myMilestones">Returns task time only for my milestones</param>
            <param name="tag" optional="true">Project tag</param>
            <param name="departament" optional="true">Departament GUID</param>
            <param name="participant" optional="true">Participant GUID</param>
            <param name="createdStart" optional="true">Starting task creation</param>
            <param name="createdStop" optional="true">Finishing task creation</param>
            <param name="lastId">Last spent time ID</param>
            <param name="status" optional="true">Payment status</param>
            <returns>Total spent time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.GetTaskTime(System.Int32)">
            <summary>
            Returns the time spent on the task with the ID specified in the request.
            </summary>
            <short>
            Get task time
            </short>
            <category>Time</category>
            <param name="taskid">Task ID</param>
            <returns>Task time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.AddTaskTime(System.Int32,System.String,System.DateTime,System.Guid,System.Single,System.Int32)">
            <summary>
            Adds the time to the selected task with the time parameters specified in the request.
            </summary>
            <short>
            Add task time
            </short>
            <category>Time</category>
            <param name="taskid">Task ID</param>
            <param name="note">Time note</param>
            <param name="date">Date</param>
            <param name="personId">Person ID</param>
            <param name="hours">Spent hours</param>
            <param name="projectId">Project ID</param>
            <returns>Created time</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTime(System.Int32,System.String,System.DateTime,System.Guid,System.Single)">
            <summary>
            Updates the time for the selected task with the time parameters specified in the request.
            </summary>
            <short>
            Update task time
            </short>
            <category>Time</category>
            <param name="timeid">Time ID</param>
            <param name="note">New time note</param>
            <param name="date">New date</param>
            <param name="personId">New person ID</param>
            <param name="hours">New spent hours</param>
            <returns>Updated time</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.UpdateTimes(System.Int32[],ASC.Projects.Core.Domain.PaymentStatus)">
            <summary>
            Updates a time status of payment with the parameters specified in the request.
            </summary>
            <short>
            Update a time status of payment
            </short>
            <category>Time</category>
            <param name="timeids">Spent time IDs</param>
            <param name="status">New payment status</param>
            <returns>Updated times</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
        <member name="M:ASC.Api.Projects.ProjectApi.DeleteTaskTimes(System.Int32[])">
            <summary>
            Deletes time from the tasks with the IDs specified in the request.
            </summary>
            <short>
            Delete task time
            </short>
            <category>Time</category>
            <param name="timeids">Spent time IDs</param>
            <returns>Deleted time</returns>
            <exception cref="T:ASC.Api.Exceptions.ItemNotFoundException"></exception>
        </member>
    </members>
</doc>
